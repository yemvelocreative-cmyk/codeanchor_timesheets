<?phpuse WHMCS\Database\Capsule;
if (!defined("WHMCS")) {    die("Access Denied");}
$reportTitle = 'Timesheet Audit Report';
/** --------------------------- * Helpers * -------------------------- */
$fmtDate = function ($str) {    $ts = strtotime($str ?? '');    return $ts ? date('Y-m-d', $ts) : date('Y-m-d');};
// Parse durations like "1:30" (HH:MM), "90" (minutes), or "1.5" (hours)$parseToMinutes = function ($val) {    if ($val === null || $val === '') return 0;    $s = trim((string)$val);
    if (strpos($s, ':') !== false) {        // HH:MM (or H:MM)        [$h, $m] = array_pad(explode(':', $s, 2), 2, '0');        $h = (int)preg_replace('/\D/', '', $h);        $m = (int)preg_replace('/\D/', '', $m);        return max(0, $h) * 60 + max(0, $m);    }    if (is_numeric($s)) {        // If it has a dot, treat as hours.decimal; else assume minutes        if (strpos($s, '.') !== false) {            return (int)round(((float)$s) * 60);        }        return (int)$s;    }    return 0;};$fmtMinutes = function ($mins) {    $mins = max(0, (int)$mins);    $h = (int) floor($mins / 60);    $m = $mins % 60;    return sprintf('%d:%02d', $h, $m);};
/** --------------------------- * Inputs (defaults) * -------------------------- */$defaultTo   = date('Y-m-d');$defaultFrom = date('Y-m-d', strtotime('-14 days'));$from = isset($_GET['from']) ? $fmtDate($_GET['from']) : $defaultFrom;$to   = isset($_GET['to'])   ? $fmtDate($_GET['to'])   : $defaultTo;if (strtotime($from) > strtotime($to)) {    $tmp  = $from; $from = $to; $to = $tmp;}
// Filters$filterAdminId  = isset($_GET['admin_id'])  ? (int)$_GET['admin_id']  : 0;   // 0 = all$filterClientId = isset($_GET['client_id']) ? (int)$_GET['client_id'] : 0;   // 0 = all$allowedStatuses = ['pending','approved','rejected'];$filterStatus   = (isset($_GET['status']) && in_array($_GET['status'], $allowedStatuses, true))    ? $_GET['status'] : 'all';
$allowedGroups = ['none','client','admin'];$groupBy = (isset($_GET['group_by']) && in_array($_GET['group_by'], $allowedGroups, true))    ? $_GET['group_by'] : 'none';
/** --------------------------- * Schema detection (task category) * -------------------------- */
$schema = Capsule::schema();$taskCategoryColumn = null;if ($schema->hasColumn('mod_timekeeper_timesheet_entries', 'task_category_id')) {    $taskCategoryColumn = 'task_category_id';} elseif ($schema->hasColumn('mod_timekeeper_timesheet_entries', 'subtask_id')) {    $taskCategoryColumn = 'subtask_id';} elseif ($schema->hasColumn('mod_timekeeper_timesheet_entries', 'task_id')) {    $taskCategoryColumn = 'task_id';}
$taskLookupTable = null;$taskLookupName  = 'name';$taskLookupId    = 'id';
if ($schema->hasTable('mod_timekeeper_task_categories')) {    $taskLookupTable = 'mod_timekeeper_task_categories';} elseif ($schema->hasTable('mod_timekeeper_subtasks')) {    $taskLookupTable = 'mod_timekeeper_subtasks';}
/** --------------------------- * Maps for dropdowns/labels * -------------------------- */// Admins: only active$adminQuery = Capsule::table('tbladmins')->select('id','firstname','lastname')->orderBy('firstname');$adminSchema = Capsule::schema();if ($adminSchema->hasColumn('tbladmins', 'disabled')) {    // Common in recent WHMCS: disabled = 0 means active    $adminQuery->where('disabled', 0);} elseif ($adminSchema->hasColumn('tbladmins', 'status')) {    // Older installs may use a status column    $adminQuery->where('status', 'Active');}
$adminRows = $adminQuery->get();$adminMap = [];
foreach ($adminRows as $a) {    $adminMap[$a->id] = trim(($a->firstname ?? '') . ' ' . ($a->lastname ?? '')) ?: ('Admin #' . (int)$a->id);}
$clientRows = Capsule::table('tblclients')->select('id','companyname','firstname','lastname')->orderBy('companyname')->orderBy('firstname')->get();$clientMap  = [];foreach ($clientRows as $c) {    $label = $c->companyname ?: trim(($c->firstname ?? '') . ' ' . ($c->lastname ?? ''));    $clientMap[$c->id] = $label !== '' ? $label : ('Client #' . (int)$c->id);}
$deptMap = Capsule::table('mod_timekeeper_departments')->pluck('name', 'id')->toArray();$taskCatMap = [];
if ($taskLookupTable) {    $taskCatMap = Capsule::table($taskLookupTable)->pluck($taskLookupName, $taskLookupId)->toArray();}
/** --------------------------- * Main query with filters * -------------------------- */$select = [    'e.id as entry_id',    't.timesheet_date',    't.status as timesheet_status',    't.admin_id',    'e.client_id',    'e.department_id',    'e.ticket_id',    'e.description',    'e.start_time',    'e.end_time',    'e.time_spent',    'e.billable',    'e.billable_time',    'e.sla',    'e.sla_time',    'e.created_at',    'e.updated_at',];
if ($taskCategoryColumn) {    $select[] = "e.$taskCategoryColumn";}
$q = Capsule::table('mod_timekeeper_timesheet_entries as e')    ->join('mod_timekeeper_timesheets as t', 't.id', '=', 'e.timesheet_id')    ->leftJoin('tbladmins as a', 'a.id', '=', 't.admin_id')    ->leftJoin('tblclients as c', 'c.id', '=', 'e.client_id')    ->whereBetween('t.timesheet_date', [$from, $to]);
if ($filterAdminId > 0) {    $q->where('t.admin_id', $filterAdminId);}if ($filterClientId > 0) {    $q->where('e.client_id', $filterClientId);}if ($filterStatus !== 'all') {    $q->where('t.status', $filterStatus);}$entries = $q->orderBy('t.timesheet_date', 'desc')    ->orderBy('t.id', 'desc')    ->orderBy('e.id', 'asc')    ->select($select)    ->get();
/** --------------------------- * Build rows + totals * -------------------------- */
$rows = [];$totalMinutesSpent   = 0;$totalMinutesBillable= 0;$totalMinutesSla     = 0;
foreach ($entries as $r) {    $adminName    = $adminMap[$r->admin_id] ?? ('Admin #' . (int)$r->admin_id);    $clientName   = $r->client_id ? ($clientMap[$r->client_id] ?? ('Client #' . (int)$r->client_id)) : '';    $department   = $r->department_id ? ($deptMap[$r->department_id] ?? ('Dept #' . (int)$r->department_id)) : '';    $taskCategory = '';    if ($taskCategoryColumn && !empty($r->{$taskCategoryColumn})) {        $taskId = (int)$r->{$taskCategoryColumn};        $taskCategory = $taskCatMap[$taskId] ?? ('Task #' . $taskId);    }
    // Totals (robust parsing)    $totalMinutesSpent    += $parseToMinutes($r->time_spent);    $totalMinutesBillable += $parseToMinutes($r->billable_time);    $totalMinutesSla      += $parseToMinutes($r->sla_time);
    $rows[] = [        'timesheet_date'    => $r->timesheet_date,        'timesheet_status'  => $r->timesheet_status,        'admin_name'        => $adminName,        'client_name'       => $clientName,        'department'        => $department,        'task_category'     => $taskCategory,        'ticket_id'         => $r->ticket_id,        'description'       => $r->description,        'start_time'        => $r->start_time,        'end_time'          => $r->end_time,        'time_spent'        => $r->time_spent,        'billable'          => (int)$r->billable,        'billable_time'     => $r->billable_time,        'sla'               => (int)$r->sla,        'sla_time'          => $r->sla_time,    ];}
$totals = [    'spent_hhmm'    => $fmtMinutes($totalMinutesSpent),    'billable_hhmm' => $fmtMinutes($totalMinutesBillable),    'sla_hhmm'      => $fmtMinutes($totalMinutesSla),];
// ---------------------------// Grouping (client/admin)// ---------------------------
$groups = [];if ($groupBy !== 'none') {    $keyField = ($groupBy === 'client') ? 'client_name' : 'admin_name';
    // Build groups: label + rows + per-group totals    foreach ($rows as $r) {        $label = trim((string)$r[$keyField]) !== '' ? $r[$keyField] : 'â€” (None)';        if (!isset($groups[$label])) {            $groups[$label] = [                'label'   => $label,                'rows'    => [],                'totals'  => ['spent' => 0, 'billable' => 0, 'sla' => 0],            ];        }        $groups[$label]['rows'][] = $r;        // Per-group totals in minutes        $groups[$label]['totals']['spent']    += $parseToMinutes($r['time_spent']);        $groups[$label]['totals']['billable'] += $parseToMinutes($r['billable_time']);        $groups[$label]['totals']['sla']      += $parseToMinutes($r['sla_time']);    }
    // Format totals to HH:MM for template    foreach ($groups as &$g) {        $g['totals_fmt'] = [            'spent'    => $fmtMinutes($g['totals']['spent']),            'billable' => $fmtMinutes($g['totals']['billable']),            'sla'      => $fmtMinutes($g['totals']['sla']),        ];    }    unset($g);}
/** --------------------------- * Expose to template * -------------------------- */
$__vars = [    'reportTitle'   => $reportTitle,    'from'          => $from,    'to'            => $to,    'rows'          => $rows,    'adminMap'      => $adminMap,    'clientMap'     => $clientMap,    'filterAdminId' => $filterAdminId,    'filterClientId'=> $filterClientId,    'filterStatus'  => $filterStatus,    'totals'        => $totals,    'groupBy' => $groupBy,    'groups'  => ($groupBy === 'none') ? [] : array_values($groups),];extract($__vars);
// CSV Export (client-side Blob): build CSV string and trigger download if requestedif (isset($_GET['export']) && $_GET['export'] === 'csv') {    // Build CSV headers and rows (same order as the on-screen table)    $flatHeader = [        'Date','Status','Admin','Client','Department','Task Category',        'Ticket ID','Description','Start','End','Time Spent','Billable','Billable Time','SLA','SLA Time'    ];    $csvLines = [];
    // Helper: escape a CSV cell    $csvEscape = function ($v) {        $s = (string)$v;        $s = str_replace(["\r\n","\r"], "\n", $s);        $needs = (strpos($s, '"') !== false) || (strpos($s, ',') !== false) || (strpos($s, "\n") !== false);        $s = str_replace('"', '""', $s);        return $needs ? '"' . $s . '"' : $s;    };    if ($groupBy === 'none') {        // Flat export (exactly the filtered rows)        $csvLines[] = implode(',', array_map($csvEscape, $flatHeader));        foreach ($rows as $r) {            $row = [                $r['timesheet_date'],                ucfirst($r['timesheet_status']),                $r['admin_name'],                $r['client_name'],                $r['department'],                $r['task_category'],                $r['ticket_id'],                $r['description'],                $r['start_time'],                $r['end_time'],                $r['time_spent'],                $r['billable'] ? 'Yes' : 'No',                $r['billable_time'],                $r['sla'] ? 'Yes' : 'No',                $r['sla_time'],            ];            $csvLines[] = implode(',', array_map($csvEscape, $row));        }    } else {        // Grouped export: match on-screen layout with sections (no extra "Group" column)        $groupLabelPrefix = ($groupBy === 'client') ? 'Client: ' : 'Admin: ';        foreach ($groups as $g) {            // Group header line            $csvLines[] = $csvEscape($groupLabelPrefix . $g['label']);            // Table header (same as UI)            $csvLines[] = implode(',', array_map($csvEscape, $flatHeader));            // Group rows            foreach ($g['rows'] as $r) {                $row = [                    $r['timesheet_date'],                    ucfirst($r['timesheet_status']),                    $r['admin_name'],                    $r['client_name'],                    $r['department'],                    $r['task_category'],                    $r['ticket_id'],                    $r['description'],                    $r['start_time'],                    $r['end_time'],                    $r['time_spent'],                    $r['billable'] ? 'Yes' : 'No',                    $r['billable_time'],                    $r['sla'] ? 'Yes' : 'No',                    $r['sla_time'],                ];                $csvLines[] = implode(',', array_map($csvEscape, $row));            }
            // Per-group subtotal line (align with the Time columns)            $csvLines[] = implode(',', array_map($csvEscape, [                $groupLabelPrefix . $g['label'] . ' â€” Subtotal',                '', '', '', '', '', '', '',                '', '',                $g['totals_fmt']['spent'],                '',                $g['totals_fmt']['billable'],                '',                $g['totals_fmt']['sla'],            ]));
            // Blank spacer between groups            $csvLines[] = '';        }        // Trim final blank line if present        if (!empty($csvLines) && end($csvLines) === '') array_pop($csvLines);    }
    // Grand totals footer (same for flat & grouped)    $csvLines[] = '';    $csvLines[] = implode(',', array_map($csvEscape, [        'Grand Totals', '', '', '', '', '', '', '', '', '',        $totals['spent_hhmm'], '', $totals['billable_hhmm'], '', $totals['sla_hhmm']    ]));    $csvString = implode("\r\n", $csvLines);
    // Filename reflects filters and grouping    $fname = 'timesheet_audit_' . str_replace('-','',$from) . '-' . str_replace('-','',$to);    if ($groupBy !== 'none') {        $fname .= '_by-' . $groupBy;    }    if (!empty($filterAdminId)) $fname .= '_admin-' . (int)$filterAdminId;    if (!empty($filterClientId)) $fname .= '_client-' . (int)$filterClientId;    if ($filterStatus !== 'all') $fname .= '_status-' . $filterStatus;    $fname .= '.csv';
    // Trigger download via Blob (no headers, so we don't break WHMCS output)    echo '<script>(function(){try{'       // CSV data (with BOM)       . 'var data=' . json_encode("\xEF\xBB\xBF" . $csvString) . ';'       . 'var blob=new Blob([data],{type:"text/csv;charset=utf-8;"});'       . 'var a=document.createElement("a");'       . 'a.href=URL.createObjectURL(blob);'       . 'a.download=' . json_encode($fname) . ';'       . 'document.body.appendChild(a);'       . 'a.click();'       . 'setTimeout(function(){URL.revokeObjectURL(a.href);a.remove();},0);'       // Remove export=csv from the URL without reloading       . 'var u=new URL(window.location.href);'       . 'u.searchParams.delete("export");'       . 'window.history.replaceState(null,"",u.toString());'       . '}catch(e){console.error(e);alert("CSV download failed. Check console for details.");}})();</script>';    // NOTE: Do NOT return here. Let the template render normally.}
// Use your known template path under /templates/admin/components/$tplPath = __DIR__ . '/../templates/admin/components/report_timesheet_audit.tpl';
if (!file_exists($tplPath)) {    echo '<div style="background:#ffecec;border:1px solid #f5c2c2;padding:10px;">            Template not found: <code>' . htmlspecialchars($tplPath, ENT_QUOTES, 'UTF-8') . '</code>          </div>';    return;}include $tplPath;